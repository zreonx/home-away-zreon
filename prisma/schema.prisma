// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Booking {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  profile       Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId     String
  property      Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String   @db.ObjectId
  orderTotal    Int
  totalNights   Int
  checkIn       DateTime
  checkOut      DateTime
  paymentStatus Boolean  @default(false)
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model Review {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  profile    Profile  @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId  String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.ObjectId
  rating     Int
  comment    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model Profile {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  clerkId      String     @unique
  firstName    String
  lastName     String
  username     String
  email        String
  profileImage String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  properties   Property[]
  favorites    Favorite[]
  reviews      Review[]
  bookings Booking[]
}

model Property {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  tagline     String
  category    String
  image       String
  country     String
  description String
  price       Int
  guests      Int
  bedrooms    Int
  beds        Int
  baths       Int
  amenities   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profile     Profile    @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId   String
  favorites   Favorite[]
  reviews     Review[]
  bookings    Booking[]
}

model Favorite {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profile   Profile @relation(fields: [profileId], references: [clerkId], onDelete: Cascade)
  profileId String

  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String   @db.ObjectId
}
